
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──
✔ broom        1.0.7     ✔ recipes      1.1.0
✔ dials        1.3.0     ✔ rsample      1.2.1
✔ dplyr        1.1.4     ✔ tibble       3.2.1
✔ ggplot2      3.5.1     ✔ tidyr        1.3.1
✔ infer        1.0.7     ✔ tune         1.2.1
✔ modeldata    1.4.0     ✔ workflows    1.1.4
✔ parsnip      1.2.1     ✔ workflowsets 1.1.0
✔ purrr        1.0.2     ✔ yardstick    1.3.1
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.5
✔ lubridate 1.9.3     ✔ stringr   1.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_character()   masks vroom::col_character()
✖ readr::col_date()        masks vroom::col_date()
✖ readr::col_datetime()    masks vroom::col_datetime()
✖ readr::col_double()      masks vroom::col_double()
✖ readr::col_factor()      masks vroom::col_factor(), scales::col_factor()
✖ readr::col_guess()       masks vroom::col_guess()
✖ readr::col_integer()     masks vroom::col_integer()
✖ readr::col_logical()     masks vroom::col_logical()
✖ readr::col_number()      masks vroom::col_number()
✖ readr::col_skip()        masks vroom::col_skip()
✖ readr::col_time()        masks vroom::col_time()
✖ readr::cols()            masks vroom::cols()
✖ readr::date_names_lang() masks vroom::date_names_lang()
✖ readr::default_locale()  masks vroom::default_locale()
✖ purrr::discard()         masks scales::discard()
✖ dplyr::filter()          masks stats::filter()
✖ stringr::fixed()         masks recipes::fixed()
✖ readr::fwf_cols()        masks vroom::fwf_cols()
✖ readr::fwf_empty()       masks vroom::fwf_empty()
✖ readr::fwf_positions()   masks vroom::fwf_positions()
✖ readr::fwf_widths()      masks vroom::fwf_widths()
✖ dplyr::lag()             masks stats::lag()
✖ readr::locale()          masks vroom::locale()
✖ readr::output_column()   masks vroom::output_column()
✖ readr::problems()        masks vroom::problems()
✖ readr::spec()            masks vroom::spec(), yardstick::spec()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(ggplot2)
> 
> 
> # Load in Data
> train_data <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test_data <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> train_data$ACTION = as.factor(train_data$ACTION)
> train_data[-which(names(train_data) == "ACTION")] <- lapply(train_data[-which(names(train_data) == "ACTION")], factor)
> # Data Cleaning and Preprocessing
> 
> ## EDA
> 
> for (feature in names(train_data)) {
+   if (feature != "action") {  # Skip the "action" column if you want
+     ggplot(train_data, aes_string(x = feature)) + 
+       geom_bar(fill = "skyblue", color = "black") +
+       theme_minimal() +
+       labs(title = paste("Distribution of", feature), x = feature, y = "Count") +
+       theme(axis.text.x = element_text(angle = 45, hjust = 1))  }
+ }
Warning message:
`aes_string()` was deprecated in ggplot2 3.0.0.
ℹ Please use tidy evaluation idioms with `aes()`.
ℹ See also `vignette("ggplot2-in-packages")` for more information. 
> 
> 
> my_recipe <- recipe(ACTION ~ ., data=train_data) %>%
+   step_mutate_at(-ACTION, fn=factor) %>% 
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur
+   step_dummy(all_nominal_predictors())  # dummy variable encoding
> 
> # apply the recipe to your data
> prep <- prep(my_recipe)
> baked <- bake(prep, new_data = NULL)
> 
> 
> ### Logistic Regression
> 
> logRegModel <- logistic_reg() %>% #Type of model3
+   set_engine("glm") 
> 
> ## Put into a workflow here
> 
> log_wf <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(logRegModel) %>%
+   fit(data=train_data)
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> test_data[-which(names(test_data) == "id")] <- lapply(test_data[-which(names(test_data) == "id")], factor)
> 
> preds <- predict(log_wf, new_data=test_data, type="prob")
There were 16 warnings (use warnings() to see them)
> kaggle_submission <- preds %>%
+   bind_cols(., test_data) %>% 
+   select(id, .pred_1) %>% 
+   rename(ACTION=.pred_1)  
>   
> 
> ## Write out the file
> vroom_write(x=kaggle_submission, file="./LogRegPreds.csv", delim=",")
> 
> 
> 
> proc.time()
   user  system elapsed 
930.707   8.958 939.658 
